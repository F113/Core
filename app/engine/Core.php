<?phpclass Core {    use Patterns;    const TEMPLATE = '<div style="margin: 40px;">        <div style="border:1px solid #888888;background-color:#c1c1c1;padding:20px;font:bold 15px Arial;color:#393939;">{title}</div>        <div style="border:1px solid #e6e6e6;background-color:#e6e6e6;padding:20px;font:normal 15px Tahoma;color:#393939;">{message}</div>        </div>';    const TITLE_EXCEPTION = 'ERROR';    const TITLE_WARNING = 'WARNING';    private $routes;    private $root;    private $dir = "";    private $page = "index";    private $path = "";    private $args = [];    private $models;    private $data = [];    function __construct($route, $routes) {        $this->root = $_SERVER["DOCUMENT_ROOT"];        // check slash in the end        if (substr($this->root, 0, -1) != '/') {            $this->root .= '/';        }        $this->classes();        $this->routes = $routes;        $this->route($route);    }    /**     * @param $route     */    private function route($route) {        // break route on segments        $route = explode("/", strtolower($route));        if ($route[count($route) - 1] == "") array_pop($route);        # check if first segment - directory        if (isset($route[0]) AND is_dir($this->root . "include/" . $route[0])) {            $this->dir = $route[0];            $this->path .= $this->dir . "/";            array_shift($route);        }        if (isset($route[0])) {            $this->page = $route[0];        }        $this->path .= $this->page;        array_shift($route);        // current page data        if (array_key_exists($this->path, $this->routes)) {            if (!isset($this->routes[$this->path]['pattern'])) self::exception("routes not correct for /" . $this->path);            $pattern = 'pattern_' . $this->routes[$this->path]['pattern'];            if (isset($this->routes[$this->path]['data'])) {                $this->data = $this->routes[$this->path]['data'];            }            foreach ($route as $key => $value) {                $this->args[] = $value;            }        } else {            $pattern = 'pattern_error';        }        // check if exist pattern method        if (!method_exists($this, $pattern)) self::exception('Pattern ' . $pattern . ' not created');        $this->$pattern($this->path);    }    /**     * @param string $name     * @param array $data     */    public function load($name, array $data = []) {        $path = $this->root . "include/{$name}.php";        if (!file_exists($path)) self::exception("File {$name}.php does not exists ");        // set args variable in scope        $args = $this->args;        // set data variable in scope        $data = array_merge($this->data, $data);        include($path);    }    /**     * return void     */    public function classes() {        $classes = glob(__DIR__ . '/../classes/*.php');        foreach ($classes as $class) {            require_once($class);            if (!class_exists(ucfirst(basename($class, '.php')))) self::warning("File " . basename($class) . " loaded, but class does not exists");        }    }    /**     * @param $title     * @param $text     */    public static function message($title, $text) {        $result = str_replace('{title}', $title, self::TEMPLATE);        $result = str_replace('{message}', $text, $result);        echo $result;    }    /**     * @param string $text     */    public static function exception($text) {        self::message(self::TITLE_EXCEPTION, $text);        die();    }    /**     * @param string $text     */    public static function warning($text) {        self::message(self::TITLE_WARNING, $text);    }}