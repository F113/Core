<?phpclass Core {		use Patterns;		const error_style   = 'border: 4px solid #ff4d00;background-color: #ffe0d3;padding: 20px;margin: 20px 40px;font: bold 16px Tahoma;color: #bf3a00;';	const message_style = 'border: 4px solid #ff9800; background-color: #ffecba; padding: 20px; margin: 20px 40px; font: bold 16px Tahoma;color: #a06000;';		private $root;	private $dir  = "";	private $page = "index";	private $path = "";	private $args = array();		private $models;	private $patterns;		function __construct ($route) {		$this->root = $_SERVER["DOCUMENT_ROOT"];				// check slash in the end		if (substr($this->root, 0, -1) != '/') {			$this->root .= '/';		}						$this->patterns = PATTERNS;				$this->route($route);	}		private function route ($route) {										// break route on segments 		$route = explode("/", strtolower($route));		if ($route[count($route)-1] == "") array_pop($route);					# check if first segment - directory		if (isset($route[0]) AND is_dir( $this->root . "include/" . $route[0] )) {			$this->dir = $route[0];			$this->path .= $this->dir . "/";			array_shift($route);		}						if (isset($route[0])) {			$this->page = $route[0];		}					$this->path .= $this->page;		array_shift($route);					// current page data		if (array_key_exists($this->path, $this->patterns)) {			$pattern = 'pattern_'.$this->patterns[$this->path];						foreach ($route as $key => $value) {				$this->args["p".($key+1)] = $value;			}		} else {			$pattern = 'pattern_error';		}				// check if exist pattern method		if (method_exists($this, $pattern)) {			$this->$pattern($this->path);		} else {			self::error('Pattern '.$pattern.' not created');		}	}		public function include ($name) {		$path = $this->root . "include/{$name}.php";		if (!file_exists($path)) self::error("File {$name} does not exists");						// set args variable in scope		$args = $this->args;				// set models variables in scope		if (!empty($this->models))		foreach ($this->models as $name => $class) {			$$name = $class;		}				include($path);		return true;	}		public function model (string $name, array $db) {		$path = $this->root . "models/$name.php";		if (!file_exists($path)) self::error("Model {$name} does not exists");				require_once($path);		if (!class_exists($name)) self::error("Class {$name} not found in models/$name.php");				$this->models[$name] = new $name($db);	}		public static function error (string $text) {		echo '<div style="' . self::error_style . '">' . $text . '</div>';		die();	}		public static function message (string $text) {		echo '<div style="' . self::message_style . '">'.$text.'</div>';	}	}